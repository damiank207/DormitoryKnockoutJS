@model A_Dormitory.Models.ApplicationModel
@using A_Dormitory.Extension;
@{
    ViewBag.Title = "Book a room";
}

<h2>Book a room</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Surname, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Surname, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Surname, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AcademicYearOfStudies, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.AcademicYearOfStudies, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.AcademicYearOfStudies, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CitizenshipDictModelId,  htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                
                
                @Html.KnockoutJsDropDownDictList("citizenship", "CitizenshipDictModelId", "CitizenshipDictModelId")
                @Html.ValidationMessageFor(model => model.CitizenshipDictModelId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.DateOfBirth, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.DateOfBirth, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CourseDictModelId,  htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CourseDictModelId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CourseDictModelId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GenderDictModelId,  htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("GenderDictModelId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.GenderDictModelId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EmailAdress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EmailAdress, new { htmlAttributes = new { @type = "email",@class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmailAdress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CollegeId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CollegeId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CollegeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IndexNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.IndexNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.IndexNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CourseYearDictModelId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CourseYearDictModelId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CourseYearDictModelId, "", new { @class = "text-danger" })
            </div>
        </div>

       

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Send a request" class="btn btn-success" />
            </div>
        </div>
    </div>
    <b>Ilosc w tablicy</b>
        <span data-bind='text: citizenship().length'>&nbsp;</span>

        @*<select class="form-control valid" data-bind="options: citizenship,  optionsText: 'Name', optionsValue: 'Code',optionsCaption: 'Choose citizenship...'" id="CitizenshipDictModelId" name="CitizenshipDictModelId"></select>*@

}

            <div>
                @Html.ActionLink("Back", "Index")
            </div>

            @section Scripts {
                @Scripts.Render("~/bundles/jqueryval")
                <script>
                    //Js model
                    var Dict = function (code, name) {
                        this.Code = ko.observable(code);
                        this.Name = ko.observable(name);

                    }
                    function ApplicationViewModel() {
                        var self = this;

                        //Data

                        self.citizenship = ko.observableArray();



                        //Loading

                        var getCitizenship = $.getJSON("/MyApi/Citizenship").success(function (data, status, xhr) {
                            var citizenship = [];
                            $.each(data, function (i) {
                                citizenship.push(new Dict(data[i].Code, data[i].Name));
                            });
                            self.citizenship(citizenship);
                        })
                            .error(function () {
                                alert("error");
                            })
                            .complete(function () {
                                console.log("fetch complete + " + this);
                            });
                    }


                    ko.applyBindings(new ApplicationViewModel());
                </script>
            }
